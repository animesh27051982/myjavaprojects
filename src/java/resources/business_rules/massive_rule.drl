dialect "mvel"

import java.math.BigDecimal;
import com.flowserve.system606.model.PerformanceObligation;
import com.flowserve.system606.model.PerformanceObligationGroup;
import com.flowserve.system606.model.Contract;
import com.flowserve.system606.model.Metric;
import com.flowserve.system606.model.CurrencyEvent;
import com.flowserve.system606.model.FinancialPeriod;
import com.flowserve.system606.model.DecimalMetric;
import com.flowserve.system606.model.RevenueMethod;
import com.flowserve.system606.model.DateMetric;
import com.flowserve.system606.model.CurrencyMetric;
import com.flowserve.system606.model.StringMetric;
import com.flowserve.system606.model.CurrencyMetricPriorPeriod;
import com.flowserve.system606.model.StringMetricPriorPeriod;
import com.flowserve.system606.model.DateMetricPriorPeriod;
import com.flowserve.system606.service.CurrencyService;
import java.time.LocalDate;
import java.util.logging.Logger;
global Logger logger;

rule "Estimated Gross Profit and Margin"
    when
        pob : PerformanceObligation()  // If a pob exists
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)  // if this metric exists and is not null, initialize variable.
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        estimatedGrossProfit : CurrencyMetric(metricType.code == "ESTIMATED_GROSS_PROFIT_LC")  // Initialize variable for calc result.
        estimatedGrossMargin : Metric(metricType.code == "ESTIMATED_GROSS_MARGIN")
    then
        modify (estimatedGrossProfit) { lcValue = (transactionPrice.lcValue - estimatedCostAtCompletion.lcValue)};
        modify (estimatedGrossMargin) { value = ((estimatedGrossProfit.lcValue == 0B || transactionPrice.lcValue == 0B) ? 0B : estimatedGrossProfit.lcValue / transactionPrice.lcValue)};
end

rule "EAC Change"
    when
        pob : PerformanceObligation()
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        estimatedCostAtCompletionPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        changeInEstimate : CurrencyMetric(metricType.code == "CHANGE_IN_EAC_LC")
    then
        modify (changeInEstimate) { lcValue = (estimatedCostAtCompletion.lcValue - estimatedCostAtCompletionPriorPeriod.lcValue)};
end

rule "Cost of Goods Sold CTD"
    when
        pob : PerformanceObligation()
        localCostsCTD : CurrencyMetric(metricType.code == "LOCAL_COSTS_CTD_LC")
        thirdPartyCostsCTD : CurrencyMetric(metricType.code == "THIRD_PARTY_COSTS_CTD_LC")
        intercoCostsCTD : CurrencyMetric(metricType.code == "INTERCOMPANY_COSTS_CTD_LC")
        costOfGoodsSoldCTD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_CTD_LC")
    then
        modify (costOfGoodsSoldCTD) { lcValue = ((localCostsCTD.lcValue == null ? 0B : localCostsCTD.lcValue) +
                                                (thirdPartyCostsCTD.lcValue == null ? 0B : thirdPartyCostsCTD.lcValue) +
                                                (intercoCostsCTD.lcValue == null ? 0B : intercoCostsCTD.lcValue))};
end

// Currently this rule is the exact same as the COGS rule above.
rule "Costs Incurred CTD"
    when
        pob : PerformanceObligation()
        localCostsCTD : CurrencyMetric(metricType.code == "LOCAL_COSTS_CTD_LC")
        thirdPartyCostsCTD : CurrencyMetric(metricType.code == "THIRD_PARTY_COSTS_CTD_LC")
        intercoCostsCTD : CurrencyMetric(metricType.code == "INTERCOMPANY_COSTS_CTD_LC")
        costsIncurredCTD : CurrencyMetric(metricType.code == "COSTS_INCURRED_CTD_LC")
    then
        modify (costsIncurredCTD) { lcValue = ( (localCostsCTD.lcValue == null ? 0B : localCostsCTD.lcValue) +
                                                (thirdPartyCostsCTD.lcValue == null ? 0B : thirdPartyCostsCTD.lcValue) +
                                                (intercoCostsCTD.lcValue == null ? 0B : intercoCostsCTD.lcValue) )};
end

rule "Cost of Goods Sold Period"
    when
        pob : PerformanceObligation()
        costOfGoodsSoldCTD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_CTD_LC", lcValue != null)
        costOfGoodsSoldCTDPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "COST_OF_GOODS_SOLD_CTD_LC", lcValue != null)
        costOfGoodsSoldPeriod : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_PERIOD_LC")
    then
        modify (costOfGoodsSoldPeriod) { lcValue = (costOfGoodsSoldCTD.lcValue - costOfGoodsSoldCTDPriorPeriod.lcValue)};
end

rule "Contract Cost to Complete"
    when
        contract : Contract()
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        costOfGoodsSoldCTD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_CTD_LC", lcValue != null)
        costToComplete : CurrencyMetric(metricType.code == "CONTRACT_COST_TO_COMPLETE_LC")
    then
        modify (costToComplete) { lcValue = (estimatedCostAtCompletion.lcValue - costOfGoodsSoldCTD.lcValue)};
end

rule "Cost of Goods Sold Backlog"
    when
        pob : PerformanceObligation()
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        costOfGoodsSoldCTD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_CTD_LC", lcValue != null)
        costOfGoodsSoldBacklog : CurrencyMetric(metricType.code == "COST_GOODS_SOLD_BACKLOG_LC")
    then
        modify (costOfGoodsSoldBacklog) { lcValue = (estimatedCostAtCompletion.lcValue - costOfGoodsSoldCTD.lcValue)};
end

rule "Remaining EAC"
    when
        pob : PerformanceObligation()
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        costOfGoodsSoldCTD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_CTD_LC", lcValue != null)
        remainingEAC : CurrencyMetric(metricType.code == "REMAINING_ESTIMATE_COMPLETE_LC")
    then
        modify (remainingEAC) { lcValue = (estimatedCostAtCompletion.lcValue - costOfGoodsSoldCTD.lcValue)};
end

rule "Percent Complete POB : Rev Rec Method is Percentage of Completion"
    when
        pob : PerformanceObligation( revenueMethod == RevenueMethod.PERC_OF_COMP)
        costOfGoodsSoldCTD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_CTD_LC", lcValue != null)
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        percentComplete : Metric(metricType.code == "PERCENT_COMPLETE")
    then
        modify (percentComplete) { value = (costOfGoodsSoldCTD.lcValue == 0B || estimatedCostAtCompletion.lcValue == 0B ? 0B : costOfGoodsSoldCTD.lcValue / estimatedCostAtCompletion.lcValue)};
end

rule "Percent Complete POB : Rev Rec Method is non-POC"
    when
        pob : PerformanceObligation(revenueMethod != RevenueMethod.PERC_OF_COMP)
        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC", ccValue != null)
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", ccValue != null)
        percentComplete : Metric(metricType.code == "PERCENT_COMPLETE")
    then
        modify (percentComplete) { value = (revenueToRecognizeCTD.ccValue == 0B || transactionPrice.ccValue == 0B ? 0B : revenueToRecognizeCTD.ccValue / transactionPrice.ccValue)};
end

rule "Contract Percent Complete"
    when
        contract : Contract()
        costOfGoodsSoldCTD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_CTD_LC", lcValue != null)
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        contractPercentComplete : Metric(metricType.code == "CONTRACT_PERCENT_COMPLETE")
    then
        modify (contractPercentComplete) { value = (costOfGoodsSoldCTD.lcValue == 0B || estimatedCostAtCompletion.lcValue == 0B ? 0B : costOfGoodsSoldCTD.lcValue / estimatedCostAtCompletion.lcValue)};
end

rule "Contract Third Party Commissions to Recognize"
    when
        contract : Contract()
        contractPercentComplete : Metric(metricType.code == "CONTRACT_PERCENT_COMPLETE", value != null)
        thirdPartyCommCTD : CurrencyMetric(metricType.code == "THIRD_PARTY_COMMISSION_CTD_LC", lcValue != null)
        thirdPartyCommToRecognizeCTD : CurrencyMetric(metricType.code == "THIRD_PARTY_COMMISSION_TO_RECOGNIZE_CTD_LC")
    then
        modify (thirdPartyCommToRecognizeCTD) { lcValue = (contractPercentComplete.value * thirdPartyCommCTD.lcValue)};
end

rule "Contract Revenue Earned to Date"
    when
        contract : Contract()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        contractPercentComplete : Metric(metricType.code == "PERCENT_COMPLETE", value != null)
        contractRevenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_LC")
    then
        modify (contractRevenueToRecognizeCTD) { lcValue = (transactionPrice.lcValue * contractPercentComplete.value)};
end

rule "Contract Billings In Excess"
    when
        contract : Contract()
        contractRevenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_LC", lcValue != null)
        contractBillingsCTDLC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_CTD_CC", lcValue != null)
        contractBillingsInExcess : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_IN_EXCESS_LC")
    then
        modify (contractBillingsInExcess) { lcValue = (contractBillingsCTDLC.lcValue <= contractRevenueToRecognizeCTD.lcValue ? 0B : contractBillingsCTDLC.lcValue - contractRevenueToRecognizeCTD.lcValue)};
end

rule "Contract Period All Billing Events Convert CC to LC If LC null"
    when
        contract : Contract()
        period : FinancialPeriod()
        currencyService : CurrencyService()  // Necessary due to mid rule-execution need for currency conversion.
        contractBillingEventCC : CurrencyEvent(eventType.code == "BILLING_EVENT_CC", ccValue != null, lcValue == null)
    then
        currencyService.convertCurrency(contractBillingEventCC, contract, period);  // Necessary due to mid rule-execution need for conversion.
end

rule "Contract Period All Billing Events Convert LC to RC"
    when
        contract : Contract()
        period : FinancialPeriod()
        currencyService : CurrencyService()
        contractBillingEventCC : CurrencyEvent(eventType.code == "BILLING_EVENT_CC", lcValue != null)
    then
        modify (contractBillingEventCC) { rcValue = currencyService.getLCtoRCExchangeRate(contract, period) * contractBillingEventCC.lcValue };
end

rule "Contract Period Billings CC"
    when
        contract : Contract()
        contractBillingPeriodTotalCC : BigDecimal() from accumulate(CurrencyEvent(eventType.code == "BILLING_EVENT_CC", ccValueSum : ccValue), sum(ccValueSum))
        contractBillingsPeriodCC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_PERIOD_CC")
    then
        modify (contractBillingsPeriodCC) {ccValue = contractBillingPeriodTotalCC};
end

rule "Contract Period Billings LC"
    when
        contract : Contract()
        contractBillingPeriodTotalLC : BigDecimal() from accumulate(CurrencyEvent(eventType.code == "BILLING_EVENT_CC", lcValueSum : lcValue), sum(lcValueSum))
        contractBillingsPeriodCC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_PERIOD_CC", ccValue != null)  // make sure cc value is there first.  not sure if necessary.
    then
        modify (contractBillingsPeriodCC) {lcValue = contractBillingPeriodTotalLC};
end

rule "Contract Period Billings RC"
    when
        contract : Contract()
        contractBillingPeriodTotalRC : BigDecimal() from accumulate(CurrencyEvent(eventType.code == "BILLING_EVENT_CC", rcValueSum : rcValue), sum(rcValueSum))
        contractBillingsPeriodCC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_PERIOD_CC", lcValue != null) // make sure lc value is there first.  not sure if necessary.
    then
        modify (contractBillingsPeriodCC) {rcValue = contractBillingPeriodTotalRC};
end

rule "Contract Billings CTD CC"
    when
        contract : Contract()
        contractBillingsPeriodCC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_PERIOD_CC", ccValue != null)
        contractBillingsCTDCCPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "CONTRACT_BILLINGS_CTD_CC")
        contractBillingsCTDCC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_CTD_CC")
    then
        modify (contractBillingsCTDCC) {ccValue = contractBillingsPeriodCC.ccValue + (contractBillingsCTDCCPriorPeriod.ccValue == null ? 0B: contractBillingsCTDCCPriorPeriod.ccValue)};
end

rule "Contract Billings CTD LC"
    when
        contract : Contract()
        contractBillingsPeriodLC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_PERIOD_CC", lcValue != null)
        contractBillingsCTDCCPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "CONTRACT_BILLINGS_CTD_CC")
        contractBillingsCTDLC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_CTD_CC")
    then
        modify (contractBillingsCTDLC) {lcValue = contractBillingsPeriodLC.lcValue + (contractBillingsCTDCCPriorPeriod.lcValue == null ? 0B: contractBillingsCTDCCPriorPeriod.lcValue)};
end

rule "Contract Billings CTD RC"
    when
        contract : Contract()
        contractBillingsPeriodRC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_PERIOD_CC", rcValue != null)
        contractBillingsCTDCCPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "CONTRACT_BILLINGS_CTD_CC")
        contractBillingsCTDRC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_CTD_CC")
    then
        modify (contractBillingsCTDRC) {rcValue = contractBillingsPeriodRC.rcValue + (contractBillingsCTDCCPriorPeriod.rcValue == null ? 0B: contractBillingsCTDCCPriorPeriod.rcValue)};
end


rule "Contract Revenue In Excess. This is named Costs in Excess on XLS : Need to investigate / confirm"
    when
        contract : Contract()
        contractRevenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_LC", lcValue != null)
        contractBillingsCTDLC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_CTD_CC", lcValue != null)
        contractRevenueInExcess : CurrencyMetric(metricType.code == "CONTRACT_REVENUE_IN_EXCESS_LC")
    then
        modify (contractRevenueInExcess) { lcValue = (contractBillingsCTDLC.lcValue >= contractRevenueToRecognizeCTD.lcValue ? 0B : contractRevenueToRecognizeCTD.lcValue - contractBillingsCTDLC.lcValue)};
end






/**
* Revenue calcs POC.  The CTD values will be calculated first.  CTD values need to be currency-converted manually. Due to the order-of-conversion issue (see below.)
* Current period revnue will be calculated based on the CTD values, hence listing CTD rules first.
**/

rule "Revenue to Recognize CTD CC-Only RevRec Method is POC"
    when
        pob : PerformanceObligation(revenueMethod == RevenueMethod.PERC_OF_COMP)
        percentComplete : Metric(metricType.code == "PERCENT_COMPLETE", value != null)
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", ccValue != null)
        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC")
    then
        modify (revenueToRecognizeCTD) { ccValue = (percentComplete.value * transactionPrice.ccValue)};
end

/**
* REVENUE_TO_RECOGNIZE_CTD_CC is a non-currency-convertible metric at the CTD level.  This is a system setting on the MetricType.
* The sytem will not automatically currency-convert this metric.  A CTD level convertsion is an invalid operation due to the
* order-of-conversion problem.  Simply stated one cannot convert, at the CTD level, a metric that contains previously converted LC components
* at previous exchange rates.  This renders a CTD level conversion inaccurate, so we must convert the LC (and RC) components manually.
* Another way of stating this problem is that you must convert-and-accumulate the CTD level rather than accumulate-and-convert.  We
* do not have access to all previous period values in the business rules, therefore we rely on the previous period values to derive the
* same result.
**/
rule "Revenue to Recognize CTD LC and RC"
    when
        pob : PerformanceObligation(revenueMethod == RevenueMethod.PERC_OF_COMP)
        period : FinancialPeriod()
        currencyService : CurrencyService()  // Necessary due to mid rule-execution need for currency conversion.
        revenueToRecognizeCurrentPeriod : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_PERIOD_CC", ccValue != null)
        revenueToRecognizeCTDPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC")
        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC")
    then
        currencyService.convertCurrency(revenueToRecognizeCurrentPeriod, pob, period);  // Necessary due to mid rule-execution need for manual conversion.
        modify (revenueToRecognizeCTD) { lcValue = (revenueToRecognizeCurrentPeriod.lcValue + (revenueToRecognizeCTDPriorPeriod.lcValue == null ? 0B : revenueToRecognizeCTDPriorPeriod.lcValue))};
        modify (revenueToRecognizeCTD) { rcValue = (revenueToRecognizeCurrentPeriod.rcValue + (revenueToRecognizeCTDPriorPeriod.rcValue == null ? 0B : revenueToRecognizeCTDPriorPeriod.rcValue))};
end

// Revenue Calcs PIT Point in Time

// PIT POBs require an alternate calculation method for CTD.  Current period revenue will still be calculated using the original forumula unless shown to be incorrect via testing.
rule "Revenue to Recognize CTD CC RevRec Method is PIT And Delivery Date Exists"
    when
        pob : PerformanceObligation(revenueMethod == RevenueMethod.POINT_IN_TIME)
        period : FinancialPeriod()
        currencyService : CurrencyService()  // Necessary due to mid rule-execution need for currency conversion.
        deliveryDate : DateMetric(metricType.code == "DELIVERY_DATE", value != null )
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", ccValue != null)
        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC", ccValue == null || ccValue == 0B)  // If we have already recognized rev, don't do it again.
    then
        modify (revenueToRecognizeCTD) { ccValue = (deliveryDate.value.compareTo(period.endDate) <= 0 ? transactionPrice.ccValue : 0B)};
        currencyService.convertCurrency(revenueToRecognizeCTD, pob, period);  // We can convert right in-line since this is a single point-in-time transaction.
end

rule "Revenue to Recognize CTD CC RevRec Method is PIT And Delivery Date Does Not Exist"
    when
        pob : PerformanceObligation(revenueMethod == RevenueMethod.POINT_IN_TIME)
        period : FinancialPeriod()
        currencyService : CurrencyService()  // Necessary due to mid rule-execution need for currency conversion.
        deliveryDate : DateMetric(metricType.code == "DELIVERY_DATE", value == null )
        revenueToRecognizeCTDPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC")
        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC")
    then
        modify (revenueToRecognizeCTD) { ccValue = (revenueToRecognizeCTDPriorPeriod.ccValue == null ? 0B : revenueToRecognizeCTDPriorPeriod.ccValue)};
        currencyService.convertCurrency(revenueToRecognizeCTD, pob, period);  // We can convert right in-line since this is a single point-in-time transaction.
end

/**
rule "Revenue to Recognize CTD CC RevRec Method is PIT And Delivery Date Exists"
    when
        pob : PerformanceObligation(revenueMethod == RevenueMethod.POINT_IN_TIME)
        period : FinancialPeriod()
        currencyService : CurrencyService()  // Necessary due to mid rule-execution need for currency conversion.
        deliveryDate : DateMetric(metricType.code == "DELIVERY_DATE", value != null )
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", ccValue != null)
        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC", ccValue == null || ccValue == 0B)  // If we have already recognized rev, don't do it again.
    then
        modify (revenueToRecognizeCTD) { ccValue = (deliveryDate.value.compareTo(period.endDate) <= 0 ? transactionPrice.ccValue : 0B)};
        currencyService.convertCurrency(revenueToRecognizeCTD, pob, period);  // We can convert right in-line since this is a single point-in-time transaction.
end
**/


// KJG Working 8/28...
/**
rule "Revenue to Recognize CTD CC RevRec Method is SL : Straight Line"
    when
        pob : PerformanceObligation(revenueMethod == RevenueMethod.STRAIGHT_LINE)
        period : FinancialPeriod()
        slStartDate : DateMetric(metricType.code == "SL_START_DATE", value != null)
        slEndDate : DateMetric(metricType.code == "SL_END_DATE", value != null)

        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC")
    then
        modify (revenueToRecognizeCTD) { ccValue = contractBillingsPeriodCC};
end
**/








rule "Revenue to Recognize CTD LC RevRec Method is RTI Right to Invoice"
    when
        pob : PerformanceObligation(revenueMethod == RevenueMethod.RIGHT_TO_INVOICE)
        contractBillingsPeriodLC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_PERIOD_CC", lcValue != null)
        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC")
    then
        modify (revenueToRecognizeCTD) { lcValue = contractBillingsPeriodLC};
end

rule "Revenue to Recognize CTD RC RevRec Method is RTI Right to Invoice"
    when
        pob : PerformanceObligation(revenueMethod == RevenueMethod.RIGHT_TO_INVOICE)
        contractBillingsPeriodRC : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_PERIOD_CC", rcValue != null)
        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_RC")
    then
        modify (revenueToRecognizeCTD) { rcValue = contractBillingsPeriodRC};
end


// Revenue Current Period CC
rule "Revenue to Recognize Current Period CC"
    when
        pob : PerformanceObligation()
        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC", ccValue != null)
        revenueToRecognizeCTDPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC")
        revenueToRecognizeCurrentPeriod : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_PERIOD_CC")
    then
        modify (revenueToRecognizeCurrentPeriod) { ccValue = (revenueToRecognizeCTDPriorPeriod.ccValue == null ? revenueToRecognizeCTD.ccValue : revenueToRecognizeCTD.ccValue - revenueToRecognizeCTDPriorPeriod.ccValue)};
end

// Revenue Current Period LC
rule "Revenue to Recognize Current Period LC"
    when
        pob : PerformanceObligation()
        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC", lcValue != null)
        revenueToRecognizeCTDPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC")
        revenueToRecognizeCurrentPeriod : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_PERIOD_CC")
    then
        modify (revenueToRecognizeCurrentPeriod) { lcValue = (revenueToRecognizeCTDPriorPeriod.lcValue == null ? revenueToRecognizeCTD.lcValue : revenueToRecognizeCTD.lcValue - revenueToRecognizeCTDPriorPeriod.lcValue)};
end

// Revenue Current Period RC
rule "Revenue to Recognize Current Period RC"
    when
        pob : PerformanceObligation()
        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC", rcValue != null)
        revenueToRecognizeCTDPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC")
        revenueToRecognizeCurrentPeriod : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_PERIOD_CC")
    then
        modify (revenueToRecognizeCurrentPeriod) { rcValue = (revenueToRecognizeCTDPriorPeriod.rcValue == null ? revenueToRecognizeCTD.rcValue : revenueToRecognizeCTD.rcValue - revenueToRecognizeCTDPriorPeriod.rcValue)};
end





// Liquidated Damanges Calcs

rule "Liquidated Damages Recognized CTD"
    when
        pob : PerformanceObligation()
        percentComplete : Metric(metricType.code == "PERCENT_COMPLETE", value != null)
        liquidatedDamagesCTD : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_CTD_CC", ccValue != null)
        liquidatedDamagesCTDToRecognize : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_CTD_CC")
    then
        modify (liquidatedDamagesCTDToRecognize) { ccValue = (percentComplete.value * liquidatedDamagesCTD.ccValue)};
end

rule "Liquidated Damages to Recognize in Current Period"
    when
        pob : PerformanceObligation()
        liquidatedDamagesToRecognizeCTD : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_CTD_CC", ccValue != null)
        liquidatedDamagesRecognizedCTDPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_CTD_CC")
        liquidatedDamagesToRecognizeCurrentPeriod : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_PERIOD_CC")
    then
        modify (liquidatedDamagesToRecognizeCurrentPeriod) { ccValue = (liquidatedDamagesRecognizedCTDPriorPeriod.ccValue == null ? liquidatedDamagesToRecognizeCTD.ccValue : liquidatedDamagesToRecognizeCTD.ccValue - liquidatedDamagesRecognizedCTDPriorPeriod.ccValue)};
end

/**
* LIQUIDATED_DAMAGES_TO_RECOGNIZE_CTD_CC is a non-currency-convertible metric at the CTD level.  This is a system setting on the MetricType.
* The sytem will not automatically currency-convert this metric.  A CTD level convertsion is an invalid operation due to the
* order-of-conversion problem.  Simply stated one cannot convert, at the CTD level, a metric that contains previously converted LC components
* at previous exchange rates.  This renders a CTD level conversion inaccurate, so we must convert the LC (and RC) components manually.
* Another way of stating this problem is that you must convert-and-accumulate the CTD level rather than accumulate-and-convert.  We
* do not have access to all previous period values in the business rules, therefore we rely on the previous period values to derive the same
* result.
**/
rule "Liquidated Damages Recognized CTD LC"  //
    when
        pob : PerformanceObligation()
        period : FinancialPeriod()
        currencyService : CurrencyService()  // Necessary due to mid rule-execution need for currency conversion.
        liquidatedDamagesToRecognizeCurrentPeriod : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_PERIOD_CC", ccValue != null)
        liquidatedDamagesRecognizedCTDPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_CTD_CC", ccValue != null)
        liquidatedDamagesCTDToRecognize : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_CTD_CC")
    then
        currencyService.convertCurrency(liquidatedDamagesToRecognizeCurrentPeriod, pob, period);  // Necessary due to mid rule-execution need for manual conversion.
        modify (liquidatedDamagesCTDToRecognize) { lcValue = (liquidatedDamagesToRecognizeCurrentPeriod.lcValue + (liquidatedDamagesRecognizedCTDPriorPeriod.lcValue == null ? 0B : liquidatedDamagesRecognizedCTDPriorPeriod.lcValue))};
        modify (liquidatedDamagesCTDToRecognize) { rcValue = (liquidatedDamagesToRecognizeCurrentPeriod.rcValue + (liquidatedDamagesRecognizedCTDPriorPeriod.rcValue == null ? 0B : liquidatedDamagesRecognizedCTDPriorPeriod.rcValue))};
end

rule "Liquidated Damages in Backlog"
    when
        pob : PerformanceObligation()
        liquidatedDamagesCTD : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_CTD_CC", ccValue != null)
        liquidatedDamagesCTDToRecognize : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_CTD_CC", ccValue != null)
        liquidatedDamagesBacklog : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_BACKLOG_CC")
    then
        modify (liquidatedDamagesBacklog) { ccValue = (liquidatedDamagesCTD.ccValue - liquidatedDamagesCTDToRecognize.ccValue)};
end

rule "Net Period Sales"
    when
        pob : PerformanceObligation()
        revenueToRecognizecCurrentPeriod : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_PERIOD_CC", ccValue != null)
        liquidatedDamagesToRecognizeCurrentPeriod : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_PERIOD_CC", ccValue != null)
        netPeriodSales : CurrencyMetric(metricType.code == "NET_PERIOD_SALES_CC")
    then
        modify (netPeriodSales) { ccValue = (revenueToRecognizecCurrentPeriod.ccValue - liquidatedDamagesToRecognizeCurrentPeriod.ccValue)};
end

rule "Transaction Price in Backlog"
    when
        pob : PerformanceObligation()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", ccValue != null)
        revenueToRecognizeCTD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_CTD_CC", ccValue != null)
        transactionPriceBacklog : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_BACKLOG_CC")
    then
        modify (transactionPriceBacklog) { ccValue = (transactionPrice.ccValue - revenueToRecognizeCTD.ccValue)};
end

rule "Transaction Price Net LD"
    when
        pob : PerformanceObligation()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        liquidatedDamagesCTD : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_CTD_CC", ccValue != null)
        transactionPriceNetLD : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_NET_LD_LC")
    then
        modify (transactionPriceNetLD) { lcValue = (transactionPrice.lcValue - liquidatedDamagesCTD.lcValue)};
end

//rule "Projected Gain/Loss Old Spec"
//    when
//        pob : PerformanceObligation()
//        transactionPriceNetLD : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_NET_LD_LC", lcValue != null)
//        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
//        projectedGainLoss : CurrencyMetric(metricType.code == "PROJECTED_GAIN_LOSS_LC")
 //   then
//        modify (projectedGainLoss) { lcValue = (transactionPriceNetLD.lcValue - estimatedCostAtCompletion.lcValue)};
//end

rule "Projected Gain/Loss in Backlog"
    when
        pob : PerformanceObligation()
        period : FinancialPeriod()  // Necessary due to mid rule-execution need for conversion.  Inputs in CC output in LC
        currencyService : CurrencyService()  // Necessary due to mid rule-execution need for conversion.
        transactionPriceBacklog : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_BACKLOG_CC", ccValue != null)
        liquidatedDamagesBacklog : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_BACKLOG_CC", ccValue != null)
        costOfGoodsSoldBacklog : CurrencyMetric(metricType.code == "COST_GOODS_SOLD_BACKLOG_LC", lcValue != null)
        projectedGainLossBacklog : CurrencyMetric(metricType.code == "PROJECTED_GAIN_LOSS_BACKLOG_LC")
    then
        currencyService.convertCurrency(transactionPriceBacklog, pob, period);  // Necessary due to mid rule-execution need for conversion.
        currencyService.convertCurrency(liquidatedDamagesBacklog, pob, period);  // Necessary due to mid rule-execution need for conversion.
        modify (projectedGainLossBacklog) { lcValue = (transactionPriceBacklog.lcValue - liquidatedDamagesBacklog.lcValue - costOfGoodsSoldBacklog.lcValue)};
end

rule "Contract Level Estimated Gross Profit and Margin"
    when
        contract : Contract()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        estimatedGrossProfit : CurrencyMetric(metricType.code == "ESTIMATED_GROSS_PROFIT_LC")
        estimatedGrossMargin : Metric(metricType.code == "ESTIMATED_GROSS_MARGIN")
    then
        modify (estimatedGrossProfit) { lcValue = (transactionPrice.lcValue - estimatedCostAtCompletion.lcValue)};
        modify (estimatedGrossMargin) { value = (estimatedGrossProfit.lcValue == 0B ? 0B : estimatedGrossProfit.lcValue / transactionPrice.lcValue)};
end

rule "POB Group Level Estimated Gross Profit and Margin"
    when
        pobGroup : PerformanceObligationGroup()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        estimatedGrossProfit : CurrencyMetric(metricType.code == "ESTIMATED_GROSS_PROFIT_LC")
        estimatedGrossMargin : Metric(metricType.code == "ESTIMATED_GROSS_MARGIN")
    then
        modify (estimatedGrossProfit) { lcValue = (transactionPrice.lcValue - estimatedCostAtCompletion.lcValue)};
        modify (estimatedGrossMargin) { value = (estimatedGrossProfit.lcValue == 0B ? 0B : estimatedGrossProfit.lcValue / transactionPrice.lcValue)};
end

rule "Contract Gross Profit and Margin CTD"
    when
        contract : Contract()
        contractRevenueCTD : CurrencyMetric(metricType.code == "CONTRACT_REVENUE_TO_RECOGNIZE_CTD_LC", lcValue != null)
        contractLiquidatedDamagesCTD : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_CTD_CC", ccValue != null)
        contractCOGSCTD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_CTD_LC", lcValue != null)
        contractLossReserve : CurrencyMetric(metricType.code == "LOSS_RESERVE_CTD_LC", lcValue != null)
        contractGrossProfit : CurrencyMetric(metricType.code == "CONTRACT_GROSS_PROFIT_LC")
        contractGrossMargin : Metric(metricType.code == "CONTRACT_GROSS_MARGIN")
    then
        modify (contractGrossProfit) { lcValue = (contractRevenueCTD.lcValue - contractCOGSCTD.lcValue + contractLossReserve.lcValue)};
        modify (contractGrossMargin) { value = (contractGrossProfit.lcValue == 0B || (contractRevenueCTD.lcValue - contractLiquidatedDamagesCTD.lcValue) == 0B ? 0B : contractGrossProfit.lcValue / (contractRevenueCTD.lcValue - contractLiquidatedDamagesCTD.lcValue) )};
end

rule "Loss Reserve"
    when
        contract : Contract()
        gainLossBacklog : CurrencyMetric(metricType.code == "PROJECTED_GAIN_LOSS_BACKLOG_LC", lcValue != null)
        lossReserveCTD : CurrencyMetric(metricType.code == "LOSS_RESERVE_CTD_LC")
    then
        modify (lossReserveCTD) { lcValue = (gainLossBacklog.lcValue >= 0B ? 0B : -gainLossBacklog.lcValue) };
end

rule "Loss Reserve Adjustment"
    when
        contract : Contract()
        lossReserve : CurrencyMetric(metricType.code == "LOSS_RESERVE_CTD_LC", lcValue != null)
        priorPeriodLossReserve : CurrencyMetricPriorPeriod(metricType.code == "LOSS_RESERVE_CTD_LC")
        lossReserveAdjustment : CurrencyMetric(metricType.code == "LOSS_RESERVE_PERIOD_ADJ_LC")
    then
        modify (lossReserveAdjustment) { lcValue = (priorPeriodLossReserve.lcValue == null ? lossReserve.lcValue : lossReserve.lcValue - priorPeriodLossReserve.lcValue) };
end

//rule "Loss Reserve Adjustment New Spec 8/17 - Reverted in favor of old spec method"
//    when
//        contract : Contract()
//        lossReserveAdjustmentCumulativePrior : CurrencyMetricPriorPeriod(metricType.code == "LOSS_RESERVE_ADJ_CUMULATIVE_LC")
//        projectedGainLossBacklog : CurrencyMetric(metricType.code == "PROJECTED_GAIN_LOSS_BACKLOG_LC", lcValue != null)
//        lossReserveAdjustment : CurrencyMetric(metricType.code == "LOSS_RESERVE_PERIOD_ADJ_LC")
//    then
//        modify (lossReserveAdjustment) { lcValue = ((lossReserveAdjustmentCumulativePrior.lcValue == null ? 0B : lossReserveAdjustmentCumulativePrior.lcValue) + projectedGainLossBacklog.lcValue)};
//end

//rule "Loss Reserve Adjustment Cumulative New Spec 8/17 - Reverted in favor of old spec method"
//    when
//        contract : Contract()
//        lossReserveAdjustment : CurrencyMetric(metricType.code == "LOSS_RESERVE_PERIOD_ADJ_LC")
//        lossReserveAdjustmentPrior : CurrencyMetricPriorPeriod(metricType.code == "LOSS_RESERVE_ADJ_CUMULATIVE_LC")
//        lossReserveAdjustmentCumulative : CurrencyMetric(metricType.code == "LOSS_RESERVE_ADJ_CUMULATIVE_LC")
//    then
//        logger.info("Calculating Cumulative Loss Adjustment");
//        modify (lossReserveAdjustmentCumulative) {lcValue = ((lossReserveAdjustment.lcValue == null ? 0B : lossReserveAdjustment.lcValue) + (lossReserveAdjustmentPrior.lcValue == null ? 0B : lossReserveAdjustmentPrior.lcValue))};
//end

rule "Cost of Goods Sold Adjusted"
    when
        contract : Contract()
        lossReserveAdjustment : CurrencyMetric(metricType.code == "LOSS_RESERVE_PERIOD_ADJ_LC", lcValue != null)
        costOfGoodsSoldCTD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_CTD_LC", lcValue != null)
        costOfGoodsSoldAdjusted : CurrencyMetric(metricType.code == "TOTAL_COST_GOODS_SOLD_LC")
    then
        modify (costOfGoodsSoldAdjusted) { lcValue = (costOfGoodsSoldCTD.lcValue - lossReserveAdjustment.lcValue)};
end

rule "Gross Profit Loss Period"
    when
        contract : Contract()
        netPeriodSales : CurrencyMetric(metricType.code == "NET_PERIOD_SALES_CC", lcValue != null)
        costOfGoodsSoldPeriod : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_PERIOD_LC", lcValue != null)
        lossReserveAdjustment : CurrencyMetric(metricType.code == "LOSS_RESERVE_PERIOD_ADJ_LC", lcValue != null)
        grossProfitLossPeriod : CurrencyMetric(metricType.code == "GROSS_PROFIT_LOSS_PERIOD_LC")
    then
        modify (grossProfitLossPeriod) { lcValue = (netPeriodSales.lcValue - costOfGoodsSoldPeriod.lcValue - lossReserveAdjustment.lcValue)};
end

rule "Contract Third Party Commissions To Recognize Current Period"
    when
        contract : Contract()
        thirdPartyCommToRecognizeCTDLC : CurrencyMetric(metricType.code == "THIRD_PARTY_COMMISSION_TO_RECOGNIZE_CTD_LC", lcValue != null)
        thirdPartyCommToRecognizePriorPeriodCTDLC : CurrencyMetricPriorPeriod(metricType.code == "THIRD_PARTY_COMMISSION_TO_RECOGNIZE_CTD_LC", lcValue != null)
        thirdPartyCommToRecognizePeriodLC : CurrencyMetric(metricType.code == "THIRD_PARTY_COMMISSION_TO_RECOGNIZE_PERIOD_LC")
    then
        modify (thirdPartyCommToRecognizePeriodLC) { lcValue = (thirdPartyCommToRecognizeCTDLC.lcValue - thirdPartyCommToRecognizePriorPeriodCTDLC.lcValue)};
end

rule "Contract Projected Gain (Loss) in Backlog incl TPC"
    when
        contract : Contract()
        projectGainLossBacklogLC : CurrencyMetric(metricType.code == "PROJECTED_GAIN_LOSS_BACKLOG_LC", lcValue != null)
        lossReserveCTDLC : CurrencyMetric(metricType.code == "LOSS_RESERVE_CTD_LC", lcValue != null)
        thirdPartyCommissionCTDLC : CurrencyMetric(metricType.code == "THIRD_PARTY_COMMISSION_CTD_LC", lcValue != null)
        thirdPartyCommissonToRecCTDLC : CurrencyMetric(metricType.code == "THIRD_PARTY_COMMISSION_TO_RECOGNIZE_CTD_LC", lcValue != null)
        projectedGainLossInclTPCBacklogLC : CurrencyMetric(metricType.code == "PROJECT_GAIN_LOSS_INCL_TPC_BACKLOG_LC")
    then
        modify (projectedGainLossInclTPCBacklogLC) { lcValue = (projectGainLossBacklogLC.lcValue - lossReserveCTDLC.lcValue - thirdPartyCommissionCTDLC.lcValue + thirdPartyCommissonToRecCTDLC.lcValue)};
end

rule "Loss Reserve Including TPC CTD : Accelerated Third Party Commissions CTD"
    when
        contract : Contract()
        projectedGainLossInclTPCBacklog : CurrencyMetric(metricType.code == "PROJECT_GAIN_LOSS_INCL_TPC_BACKLOG_LC", lcValue != null)
        lossReserveInclTPCCTD : CurrencyMetric(metricType.code == "LOSS_RESERVE_INCL_TPC_CTD_LC")
    then
        modify (lossReserveInclTPCCTD) { lcValue = (projectedGainLossInclTPCBacklog.lcValue >= 0B ? 0B : -projectedGainLossInclTPCBacklog.lcValue) };
end

rule "Loss Reserve Adjustment Including TPC Current Period : Accelerated Third Party Commissions Current Period"
    when
        contract : Contract()
        lossReserveInclTPCCTD : CurrencyMetric(metricType.code == "LOSS_RESERVE_INCL_TPC_CTD_LC", lcValue != null)
        priorPeriodLossReserveInclTPC : CurrencyMetricPriorPeriod(metricType.code == "LOSS_RESERVE_INCL_TPC_CTD_LC")
        lossReserveAdjustmentInclTPC : CurrencyMetric(metricType.code == "LOSS_RESERVE_INCL_TPC_PERIOD_LC")
    then
        modify (lossReserveAdjustmentInclTPC) { lcValue = (priorPeriodLossReserveInclTPC.lcValue == null ? lossReserveInclTPCCTD.lcValue : lossReserveInclTPCCTD.lcValue - priorPeriodLossReserveInclTPC.lcValue) };
end

rule "Contract TPC & Other Inputs Rolling Next Month"
    when
        contract : Contract()
        thirdPartyComCTDLC : CurrencyMetric(metricType.code == "THIRD_PARTY_COMMISSION_CTD_LC", lcValue == null)
        thirdPartyComCTDLCPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "THIRD_PARTY_COMMISSION_CTD_LC", lcValue != null)
    then
        modify (thirdPartyComCTDLC) { lcValue = (thirdPartyComCTDLCPriorPeriod.lcValue)};
end

rule "POB TPC & Other Inputs Rolling Next Month"
    when
        pob : PerformanceObligation()
        salesDestination : StringMetric(metricType.code == "SALES_DESTINATION", value == null)
        oeamDisagg : StringMetric(metricType.code == "OEAM_DISAGG", value == null)
        slStartDate : DateMetric(metricType.code == "SL_START_DATE", value == null)
        slEndDate : DateMetric(metricType.code == "SL_END_DATE", value == null)
        salesDestinationPriorPeriod : StringMetricPriorPeriod(metricType.code == "SALES_DESTINATION" , value != null)
        oeamDisaggPriorPeriod : StringMetricPriorPeriod(metricType.code == "OEAM_DISAGG", value != null)
        slStartDatePriorPeriod : DateMetricPriorPeriod(metricType.code == "SL_START_DATE", value != null)
        slEndDatePriorPeriod : DateMetricPriorPeriod(metricType.code == "SL_END_DATE", value != null)
    then
        modify (salesDestination) { value = (salesDestinationPriorPeriod.value)};
        modify (oeamDisagg) { value = (oeamDisaggPriorPeriod.value)};
        modify (slStartDate) { value = (slStartDatePriorPeriod.value)};
        modify (slEndDate) { value = (slEndDatePriorPeriod.value)};
end


//
// Begin Validation Rules Section
//

rule "Transaction Price Validation Rule"
    when
        pob : PerformanceObligation()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", ccValue != null && ccValue != 0B)
        transactionPricePriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "TRANSACTION_PRICE_CC", ccValue != null && ccValue != 0 && ccValue != 0B)
        eval(((Math.abs(transactionPrice.ccValue - transactionPricePriorPeriod.ccValue) / transactionPricePriorPeriod.ccValue)) > 0.10)
    then
        modify (transactionPrice) { message = "The transaction Price has changed >10%. Please verify that contract revision was entered/reviewed/approved. Please verify the accuracy of the Transaction Price."};
end

rule "Clear Message: Transaction Price Validation Rule"
    when
        pob : PerformanceObligation()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", ccValue != null && ccValue != 0B)
        transactionPricePriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "TRANSACTION_PRICE_CC", ccValue != null && ccValue != 0)
        eval(transactionPrice.message != null)
        eval(((Math.abs(transactionPrice.ccValue - transactionPricePriorPeriod.ccValue) / transactionPricePriorPeriod.ccValue)) <= 0.10)
    then
        modify (transactionPrice) { message = null };
end

rule "Liquidated Damages Penalty Validation Rule"
   when
        pob : PerformanceObligation()  // If a pob exists
        liquidatedDamages : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_CTD_CC", ccValue != null && ccValue != 0B)
        liquidatedDamagesPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "LIQUIDATED_DAMAGES_CTD_CC", ccValue != null && ccValue != 0B)
        eval(((Math.abs(liquidatedDamages.ccValue - liquidatedDamagesPriorPeriod.ccValue) / liquidatedDamagesPriorPeriod.ccValue)) > 0.10)
    then
        modify (liquidatedDamages) { message = "The Liquidated Damages Penalty has changed > 10%. Please verify the amount and that the change is documented in the Contract Review Module."};
end

rule "Clear Message: Liquidated Damages Penalty Validation Rule"
   when
        pob : PerformanceObligation()  // If a pob exists
        liquidatedDamages : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_CTD_CC", ccValue != null && ccValue != 0B)
        liquidatedDamagesPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "LIQUIDATED_DAMAGES_CTD_CC", ccValue != null && ccValue != 0B)
        eval(liquidatedDamages.message != null)
        eval(((Math.abs(liquidatedDamages.ccValue - liquidatedDamagesPriorPeriod.ccValue) / liquidatedDamagesPriorPeriod.ccValue)) <= 0.10)
    then
        modify (liquidatedDamages) { message = null };
end

rule "EAC vs TP Validation Rule"
    when
        pob : PerformanceObligation()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        EAC : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null && lcValue > transactionPrice.lcValue)
        eval(EAC.message == null)
    then
        modify (EAC) { message = "Estimate at completion is greater than transaction price in local currency.  Ensure accuracy of EAC and/or TP, then evaluate contract for a loss provision."};
end

rule "Clear Message: EAC vs TP Validation Rule"
    when
        pob : PerformanceObligation()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        EAC : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null && lcValue <= transactionPrice.lcValue)
        eval(EAC.message != null && EAC.message.contains("Estimate at completion is"))  // We have two validation rules for this metric.  Only delete message if relevant.
    then
        modify (EAC) { message = null };
end

rule "EAC vs Incurred Costs Validation Rule"
    when
        pob : PerformanceObligation()
        localCostsCTD : CurrencyMetric(metricType.code == "LOCAL_COSTS_CTD_LC", lcValue != null)
        EAC : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null && lcValue < localCostsCTD.lcValue)
    then
        modify (EAC) { message = "Incurred Costs are greater than Estimates at Completion. Please review contract estimates and revise to include costs necessary to complete work on contract"};
        modify (localCostsCTD) { message = "Incurred Costs are greater than Estimates at Completion. Please review contract estimates and revise to include costs necessary to complete work on contract"};
end

rule "Clear Message: EAC vs Incurred Costs Validation Rule"
    when
        pob : PerformanceObligation()
        localCostsCTD : CurrencyMetric(metricType.code == "LOCAL_COSTS_CTD_LC", lcValue != null)
        EAC : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null && lcValue > localCostsCTD.lcValue)
        eval(EAC.message != null && EAC.message.contains("Incurred Costs are"))  // We have two validation rules for this metric.  Only delete message if relevant.
    then
        modify (EAC) { message = null };
        modify (localCostsCTD) { message = null };
end

rule "Delivery Date Validation Rule"
   when
        pob : PerformanceObligation()  // If a pob exists
        deliveryDate : DateMetric(metricType.code == "DELIVERY_DATE", value != null &&  value.compareTo(LocalDate.now())<0)
    then
        modify (deliveryDate) { message = "Shipment/Delivery Date is less than current date.Actual Shipment/Delivery Date is input for closed Pob."};
end

rule "Clear Message: Delivery Date Validation Rule"
   when
        pob : PerformanceObligation()  // If a pob exists
        deliveryDate : DateMetric(metricType.code == "DELIVERY_DATE", value != null &&  value.compareTo(LocalDate.now())>0)
        eval(deliveryDate.message != null && deliveryDate.message.contains("Shipment/Delivery Date is less"))
    then
        modify (deliveryDate) { message = null};
end

rule "Incurred Costs vs Period period Incurred Costs Validation Rule"
    when
        pob : PerformanceObligation()
        localCostsCTD : CurrencyMetric(metricType.code == "LOCAL_COSTS_CTD_LC", lcValue != null)
        localCostsPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "LOCAL_COSTS_CTD_LC", lcValue != null && lcValue > localCostsCTD.lcValue)
    then
        modify (localCostsCTD) { message = "Incurred Costs are lower than prior period incurred costs should require an explanation."};
end

rule "Clear Message: Incurred Costs vs Period period Incurred Costs Validation Rule"
     when
        pob : PerformanceObligation()
        localCostsCTD : CurrencyMetric(metricType.code == "LOCAL_COSTS_CTD_LC", lcValue != null)
        localCostsPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "LOCAL_COSTS_CTD_LC", lcValue != null && lcValue <= localCostsCTD.lcValue)
        eval(localCostsCTD.message != null && localCostsCTD.message.contains("Incurred Costs are lower"))
    then
        modify (localCostsCTD) { message = null };
end

