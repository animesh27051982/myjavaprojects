dialect "mvel"

import java.math.BigDecimal;
import com.flowserve.system606.model.PerformanceObligation;
import com.flowserve.system606.model.Metric;
import com.flowserve.system606.model.MetricPriorPeriod;
import java.util.logging.Logger;
global Logger logger;

rule "Estimated Gross Profit and Margin"

    // Needed only to support tab-out ajax requests on the UI.
    when
        // Pull input values needed for this calculation.
        pob : PerformanceObligation()  // If a pob exists
        transactionPrice : Metric(metricType.id == "TRANSACTION_PRICE_CC", value != null)  // if this metric exists and is not null, initialize variable.
        estimatedCostAtCompletion : Metric(metricType.id == "ESTIMATED_COST_AT_COMPLETION_LC", value != null)
        estimatedGrossProfit : Metric(metricType.id == "ESTIMATED_GROSS_PROFIT_LC")  // Initialize variable for calc result.
        estimatedGrossMargin : Metric(metricType.id == "ESTIMATED_GROSS_MARGIN_LC")
    then
        // Calculate all outputs possible using these inputs.
        modify (estimatedGrossProfit) { value = (transactionPrice.value - estimatedCostAtCompletion.value)};
        modify (estimatedGrossMargin) { value = (estimatedGrossProfit.value / transactionPrice.value)};
end

rule "EAC Change"

    // Needed only to support tab-out ajax requests on the UI.
    when
        // Pull input values needed for this calculation.
        pob : PerformanceObligation()
        estimatedCostAtCompletion : Metric(metricType.id == "ESTIMATED_COST_AT_COMPLETION_LC", value != null)
        estimatedCostAtCompletionPriorPeriod : MetricPriorPeriod(metricType.id == "ESTIMATED_COST_AT_COMPLETION_LC", value != null)
        changeInEstimate : Metric(metricType.id == "CHANGE_IN_EAC_LC")
    then
        modify (changeInEstimate) { value = (estimatedCostAtCompletion.value - estimatedCostAtCompletionPriorPeriod.value)};
end

rule "Cost of Goods Sold ITD"
    when
        pob : PerformanceObligation()
        localCostsITD : Metric(metricType.id == "LOCAL_COSTS_ITD_LC", value != null)       // null check means don't run this entire rule if the metric value is null.  We may have to break the rules up and pull the ones that rely on prior period to their own rule but proceed here for now.
        thirdPartyCostsITD : Metric(metricType.id == "THIRD_PARTY_COSTS_ITD_LC", value != null)
        intercoCostsITD : Metric(metricType.id == "INTERCOMPANY_COSTS_ITD_LC", value != null)
        costOfGoodsSoldITD : Metric(metricType.id == "COST_OF_GOODS_SOLD_ITD_LC")               // don't worry about null check here since we setting this as output calc below.  it is null initially.
    then
        modify (costOfGoodsSoldITD) { value = (localCostsITD.value + thirdPartyCostsITD.value + intercoCostsITD.value)};
end

rule "Cost of Goods Sold Backlog"
    when
        pob : PerformanceObligation()
        estimatedCostAtCompletion : Metric(metricType.id == "ESTIMATED_COST_AT_COMPLETION_LC", value != null)
        costOfGoodsSoldITD : Metric(metricType.id == "COST_OF_GOODS_SOLD_ITD_LC", value != null)
        costOfGoodsSoldBacklog : Metric(metricType.id == "COST_GOODS_SOLD_BACKLOG_LC")
    then
        modify (costOfGoodsSoldBacklog) { value = (estimatedCostAtCompletion.value - costOfGoodsSoldITD.value)};
end

rule "Remaining EAC"
    when
        pob : PerformanceObligation()
        estimatedCostAtCompletion : Metric(metricType.id == "ESTIMATED_COST_AT_COMPLETION_LC", value != null)
        costOfGoodsSoldITD : Metric(metricType.id == "COST_OF_GOODS_SOLD_ITD_LC", value != null)
        remainingEACLC : Metric(metricType.id == "REMAINING_ESTIMATE_COMPLETE_LC")
    then
        modify (remainingEACLC) { value = (estimatedCostAtCompletion.value - costOfGoodsSoldITD.value)};
end

rule "Percent Complete"
    when
        pob : PerformanceObligation()
        costOfGoodsSoldITD : Metric(metricType.id == "COST_OF_GOODS_SOLD_ITD_LC", value != null)
        estimatedCostAtCompletion : Metric(metricType.id == "ESTIMATED_COST_AT_COMPLETION_LC", value != null)
        percentComplete : Metric(metricType.id == "PERCENT_COMPLETE")  // don't worry about null check here since we setting this as output calc below.  it is null initially.
    then
        modify (percentComplete) { value = (costOfGoodsSoldITD.value / estimatedCostAtCompletion.value)};
end

rule "Revenue to Recognize ITD"
    when
        pob : PerformanceObligation()
        percentComplete : Metric(metricType.id == "PERCENT_COMPLETE", value != null)
        transactionPrice : Metric(metricType.id == "TRANSACTION_PRICE_CC", value != null)
        revenueToRecognizeITD : Metric(metricType.id == "REVENUE_TO_RECOGNIZE_ITD_LC")
    then
        modify (revenueToRecognizeITD) { value = (percentComplete.value * transactionPrice.value)};
end

rule "Revenue to Recognize Current Period"
    when
        pob : PerformanceObligation()
        revenueToRecognizeITD : Metric(metricType.id == "REVENUE_TO_RECOGNIZE_ITD_LC", value != null)
        revenueToRecognizeITDPriorPeriod : MetricPriorPeriod(metricType.id == "REVENUE_TO_RECOGNIZE_ITD_LC", value != null)
        revenueToRecognizeCurrentPeriod : Metric(metricType.id == "REVENUE_TO_RECOGNIZE_PERIOD_LC")
    then
        modify (revenueToRecognizeCurrentPeriod) { value = (revenueToRecognizeITD.value - revenueToRecognizeITDPriorPeriod.value)};
end


rule "Liquidated Damages Recognized ITD"  // The amount of LD to recognize inception to date
    when
        pob : PerformanceObligation()
        percentComplete : Metric(metricType.id == "PERCENT_COMPLETE", value != null)
        liquidatedDamagesITD : Metric(metricType.id == "LIQUIDATED_DAMAGES_ITD_CC", value != null)
        liquidatedDamagesITDToRecognize : Metric(metricType.id == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_ITD_LC")
    then
        modify (liquidatedDamagesITDToRecognize) { value = (percentComplete.value * liquidatedDamagesITD.value)};
end

rule "Liquidated Damages to Recognize in Current Period"
    when
        pob : PerformanceObligation()
        liquidatedDamagesToRecognizeITD : Metric(metricType.id == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_ITD_LC", value != null)
        liquidatedDamagesRecognizedITDPriorPeriod : MetricPriorPeriod(metricType.id == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_ITD_LC", value != null)
        liquidatedDamagesToRecognizeCurrentPeriod : Metric(metricType.id == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_PERIOD_LC")
    then
        modify (liquidatedDamagesToRecognizeCurrentPeriod) { value = (liquidatedDamagesToRecognizeITD.value - liquidatedDamagesRecognizedITDPriorPeriod.value)};
end

rule "Liquidated Damages in Backlog"
    when
        pob : PerformanceObligation()
        liquidatedDamagesITD : Metric(metricType.id == "LIQUIDATED_DAMAGES_ITD_CC", value != null)
        liquidatedDamagesITDToRecognize : Metric(metricType.id == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_ITD_LC", value != null)
        liquidatedDamagesBacklog : Metric(metricType.id == "LIQUIDATED_DAMAGES_BACKLOG_LC")
    then
        modify (liquidatedDamagesBacklog) { value = (liquidatedDamagesITD.value - liquidatedDamagesITDToRecognize.value)};
end


rule "Net Period Sales"
    when
        pob : PerformanceObligation()
        revenueToRecognizecCurrentPeriod : Metric(metricType.id == "REVENUE_TO_RECOGNIZE_PERIOD_LC", value != null)
        liquidatedDamagesToRecognizeCurrentPeriod : Metric(metricType.id == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_PERIOD_LC", value != null)
        netPeriodSales : Metric(metricType.id == "NET_PERIOD_SALES_LC")
    then
        modify (netPeriodSales) { value = (revenueToRecognizecCurrentPeriod.value - liquidatedDamagesToRecognizeCurrentPeriod.value)};
end

rule "Transaction Price in Backlog"
    when
        pob : PerformanceObligation()
        transactionPrice : Metric(metricType.id == "TRANSACTION_PRICE_CC", value != null)
        revenueToRecognizeITD : Metric(metricType.id == "REVENUE_TO_RECOGNIZE_ITD_LC", value != null)
        transactionPriceBacklogLC : Metric(metricType.id == "TRANSACTION_PRICE_BACKLOG_LC")
    then
        modify (transactionPriceBacklogLC) { value = (transactionPrice.value - revenueToRecognizeITD.value)};
end


rule "Transaction Price Net LD"
    when
        pob : PerformanceObligation()
        transactionPrice : Metric(metricType.id == "TRANSACTION_PRICE_CC", value != null)
        liquidatedDamagesITD : Metric(metricType.id == "LIQUIDATED_DAMAGES_ITD_CC", value != null)
        transactionPriceNetLDLC : Metric(metricType.id == "TRANSACTION_PRICE_NET_LD_LC")
    then
        modify (transactionPriceNetLDLC) { value = (transactionPrice.value - liquidatedDamagesITD.value)};
end

rule "Projected Gain/Loss"
    when
        pob : PerformanceObligation()
        transactionPriceNetLDLC : Metric(metricType.id == "TRANSACTION_PRICE_NET_LD_LC", value != null)
        remainingEACLC : Metric(metricType.id == "REMAINING_ESTIMATE_COMPLETE_LC", value != null)
        projectedGainLossLC : Metric(metricType.id == "PROJECT_GAIN_LOSS_LC")
    then
        modify (projectedGainLossLC) { value = (transactionPriceNetLDLC.value - remainingEACLC.value)};
end

rule "Contract Level Estimated Gross Profit and Margin"

    when

        contract : Contract()    // or maybe even --- accumulable : Accumulable() if the engine will support this.  This way we can reuse rules at multiple levels.
        transactionPrice : Metric(metricType.id == "TRANSACTION_PRICE_CC", value != null)  // if this metric exists and is not null, initialize variable.
        liquidatedDamagesITD : Metric(metricType.id == "LIQUIDATED_DAMAGES_ITD_CC", value != null)
        estimatedCostAtCompletion : Metric(metricType.id == "ESTIMATED_COST_AT_COMPLETION_LC", value != null)

        estimatedGrossProfit : Metric(metricType.id == "ESTIMATED_GROSS_PROFIT_LC")
        estimatedGrossMargin : Metric(metricType.id == "ESTIMATED_GROSS_MARGIN_LC")

    then

        // Calculate all outputs possible using these inputs.
        modify (estimatedGrossProfit) { value = (transactionPrice.value - liquidatedDamagesITD.value - estimatedCostAtCompletion.value)};
        modify (estimatedGrossMargin) { value = (estimatedGrossProfit.value / (transactionPrice.value -liquidatedDamagesITD.value) )};

end