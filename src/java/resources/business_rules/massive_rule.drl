dialect "mvel"

import com.flowserve.system606.model.PerformanceObligation;
import com.flowserve.system606.model.InputTypeName;
import com.flowserve.system606.model.OutputTypeName;
import java.util.logging.Logger;

global Logger logger;

rule "Calculate EAC Change"

    // Needed only to support tab-out ajax requests on the UI.
    when
        // Pull input values needed for this calculation.
        pob : PerformanceObligation(
            estimatedCostAtCompletion : getCurrencyInput(InputTypeName.ESTIMATED_COST_AT_COMPLETION) != null,
            estimatedCostAtCompletionPriorPeriod : getCurrencyInputPriorPeriod(InputTypeName.ESTIMATED_COST_AT_COMPLETION) != null
        )
    then
        changeInEstimate = estimatedCostAtCompletionPriorPeriod - estimatedCostAtCompletion;
        pob.putCurrencyOutput(OutputTypeName.CHANGE_IN_ESTIMATED_COST_AT_COMPLETION, changeInEstimate);
end

rule "Calculate Estimated Gross Profit and Margin"

    // Needed only to support tab-out ajax requests on the UI.
    when
        // Pull input values needed for this calculation.
        pob : PerformanceObligation(
            transactionPrice : getCurrencyInput(InputTypeName.TRANSACTION_PRICE) != null,
            estimatedCostAtCompletion : getCurrencyInput(InputTypeName.ESTIMATED_COST_AT_COMPLETION) != null
        )
    then
        // Calculate all outputs possible using these inputs.

        estimatedGrossProfit =  transactionPrice - estimatedCostAtCompletion;
        pob.putCurrencyOutput(OutputTypeName.ESTIMATED_GROSS_PROFIT, estimatedGrossProfit);
        estimatedGrossMargin = estimatedGrossProfit / transactionPrice
        pob.putCurrencyOutput(OutputTypeName.ESTIMATED_GROSS_MARGIN, estimatedGrossMargin);
end



rule "Calculate Cumulative Total ITD Costs, Percent Complete, Revenue Earned to Date, Cumulative Revenue to Recognize"
    // We have everything we need, run all calcs.
    when
        pob : PerformanceObligation(
            costIncurred : getCurrencyInput(InputTypeName.CUMULATIVE_COST_INCURRED) != null,
            thirdPartyProgress : getCurrencyInput(InputTypeName.CUMULATIVE_THIRD_PARTY_PROGRESS) != null,
            intercoProgress : getCurrencyInput(InputTypeName.CUMULATIVE_INTERCOMPANY_PROGRESS) != null,
            estimatedCostAtCompletion : getCurrencyInput(InputTypeName.ESTIMATED_COST_AT_COMPLETION) != null,
            transactionPrice : getCurrencyInput(InputTypeName.TRANSACTION_PRICE) != null,
            priorPeriodCumulative : getCurrencyValuePriorPeriod() != null,
            periodExRate: getContractToLocalFxRate() != null,
            totalLiquidatedDamages : getCurrencyInput(InputTypeName.LIQUIDATED_DAMAGES) != null,
            liquidatedDamagesPriorPeriod : getLiquidatedDamagesPriorPeriod() != null
        )
    then
        totalITDCosts = costIncurred + thirdPartyProgress + intercoProgress;
        pob.putCurrencyOutput(OutputTypeName.CUMULATIVE_TOTAL_ITD_COSTS, totalITDCosts);
        percentComplete = totalITDCosts / estimatedCostAtCompletion;
        pob.putCurrencyOutput(OutputTypeName.PERCENT_COMPLETE, percentComplete);
        revenueEarnedToDate = percentComplete * transactionPrice;
        pob.putCurrencyOutput(OutputTypeName.REVENUE_EARNED_TO_DATE, revenueEarnedToDate);
        revenueToRecognize = percentComplete * transactionPrice;
        pob.putCurrencyOutput(OutputTypeName.CUMULATIVE_REVENUE_TO_RECOGNIZE, revenueToRecognize );
        periodRevenue = revenueToRecognize - priorPeriodCumulative;
        pob.putCurrencyOutput(OutputTypeName.PERIOD_REVENUE, periodRevenue);
        periodRevenueLocalCurrency = periodRevenue * periodExRate;
        pob.putCurrencyOutput(OutputTypeName.PERIOD_REVENUE_LOCAL_CURRENCY, periodRevenueLocalCurrency);
        cumulativeLiquidatedDamages = percentComplete * totalLiquidatedDamages;
        pob.putCurrencyOutput(OutputTypeName.CUMULATIVE_LIQUIDATED_DAMAGES_CC, cumulativeLiquidatedDamages);
        liquidatedDamagesCurrentPeriodCC = cumulativeLiquidatedDamages - liquidatedDamagesPriorPeriod;
        pob.putCurrencyOutput(OutputTypeName.LIQUIDATED_DAMAGES_RECOGNIZE_CURRENT_PERIOD_CC, liquidatedDamagesCurrentPeriodCC);
        liquidatedDamagesCurrentPeriodLC = liquidatedDamagesCurrentPeriodCC * periodExRate;
        pob.putCurrencyOutput(OutputTypeName.LIQUIDATED_DAMAGES_RECOGNIZE_CURRENT_PERIOD_LC, liquidatedDamagesCurrentPeriodCC);
        logger.info("Contract to Local Fx Rate: " + pob.contractToLocalFxRate);
end
