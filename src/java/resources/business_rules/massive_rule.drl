dialect "mvel"

import java.math.BigDecimal;
import com.flowserve.system606.model.PerformanceObligation;
import com.flowserve.system606.model.PerformanceObligationGroup;
import com.flowserve.system606.model.Contract;
import com.flowserve.system606.model.Metric;
import com.flowserve.system606.model.DecimalMetric;
import com.flowserve.system606.model.CurrencyMetric;
import com.flowserve.system606.model.CurrencyMetricPriorPeriod;
import java.util.logging.Logger;
global Logger logger;

rule "Estimated Gross Profit and Margin"
    when
        // Pull input values needed for this calculation.
        pob : PerformanceObligation()  // If a pob exists
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)  // if this metric exists and is not null, initialize variable.
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        estimatedGrossProfit : CurrencyMetric(metricType.code == "ESTIMATED_GROSS_PROFIT_LC")  // Initialize variable for calc result.
        estimatedGrossMargin : Metric(metricType.code == "ESTIMATED_GROSS_MARGIN")
    then
        modify (estimatedGrossProfit) { lcValue = (transactionPrice.lcValue - estimatedCostAtCompletion.lcValue)};
        modify (estimatedGrossMargin) { value = (estimatedGrossProfit.lcValue == 0B ? 0B : estimatedGrossProfit.lcValue / transactionPrice.lcValue)};
end

rule "EAC Change"
    when
        pob : PerformanceObligation()
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        estimatedCostAtCompletionPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        changeInEstimate : CurrencyMetric(metricType.code == "CHANGE_IN_EAC_LC")
    then
        modify (changeInEstimate) { lcValue = (estimatedCostAtCompletion.lcValue - estimatedCostAtCompletionPriorPeriod.lcValue)};
end

rule "Cost of Goods Sold ITD"
    when
        pob : PerformanceObligation()
        localCostsITD : CurrencyMetric(metricType.code == "LOCAL_COSTS_ITD_LC", lcValue != null)
        thirdPartyCostsITD : CurrencyMetric(metricType.code == "THIRD_PARTY_COSTS_ITD_LC", lcValue != null)
        intercoCostsITD : CurrencyMetric(metricType.code == "INTERCOMPANY_COSTS_ITD_LC", lcValue != null)
        costOfGoodsSoldITD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_ITD_LC")
    then
        modify (costOfGoodsSoldITD) { lcValue = (localCostsITD.lcValue + thirdPartyCostsITD.lcValue + intercoCostsITD.lcValue)};
end


rule "Contract Cost to Complete"
    when
        contract : Contract()
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        costOfGoodsSoldITD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_ITD_LC", lcValue != null)
        costToComplete : CurrencyMetric(metricType.code == "CONTRACT_COST_TO_COMPLETE_LC")
    then
        modify (costToComplete) { lcValue = (estimatedCostAtCompletion.lcValue - costOfGoodsSoldITD.lcValue)};
end

rule "Cost of Goods Sold Backlog"
    when
        pob : PerformanceObligation()
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        costOfGoodsSoldITD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_ITD_LC", lcValue != null)
        costOfGoodsSoldBacklog : CurrencyMetric(metricType.code == "COST_GOODS_SOLD_BACKLOG_LC")
    then
        modify (costOfGoodsSoldBacklog) { lcValue = (estimatedCostAtCompletion.lcValue - costOfGoodsSoldITD.lcValue)};
end

rule "Remaining EAC"
    when
        pob : PerformanceObligation()
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        costOfGoodsSoldITD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_ITD_LC", lcValue != null)
        remainingEAC : CurrencyMetric(metricType.code == "REMAINING_ESTIMATE_COMPLETE_LC")
    then
        modify (remainingEAC) { lcValue = (estimatedCostAtCompletion.lcValue - costOfGoodsSoldITD.lcValue)};
end

rule "Percent Complete POB"
    when
        pob : PerformanceObligation()
        costOfGoodsSoldITD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_ITD_LC", lcValue != null)
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        percentComplete : Metric(metricType.code == "PERCENT_COMPLETE")
    then
        modify (percentComplete) { value = (costOfGoodsSoldITD.lcValue == 0B || estimatedCostAtCompletion.lcValue == 0B ? 0B : costOfGoodsSoldITD.lcValue / estimatedCostAtCompletion.lcValue)};
end

rule "Percent Complete Contract"
    when
        contract : Contract()
        costOfGoodsSoldITD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_ITD_LC", lcValue != null)
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        percentComplete : Metric(metricType.code == "PERCENT_COMPLETE")
    then
        modify (percentComplete) { value = (costOfGoodsSoldITD.lcValue == 0B || estimatedCostAtCompletion.lcValue == 0B ? 0B : costOfGoodsSoldITD.lcValue / estimatedCostAtCompletion.lcValue)};
end

rule "Contract Revenue Earned to Date"
    when
        contract : Contract()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        contractPercentComplete : Metric(metricType.code == "PERCENT_COMPLETE", value != null)
        contractRevenueToRecognizeITD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_ITD_LC")
    then
        modify (contractRevenueToRecognizeITD) { lcValue = (transactionPrice.lcValue * contractPercentComplete.value)};
end

rule "Contract Billings In Excess"
    when
        contract : Contract()
        contractRevenueToRecognizeITD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_ITD_LC", lcValue != null)
        contractBillingsInExcess : CurrencyMetric(metricType.code == "CONTRACT_BILLINGS_IN_EXCESS_LC")
    then
        modify (contractBillingsInExcess) { lcValue = (contract.getTotalBillingsLocalCurrency() <= contractRevenueToRecognizeITD.lcValue ? 0B : contract.getTotalBillingsLocalCurrency() - contractRevenueToRecognizeITD.lcValue)};
end

rule "Contract Revenue In Excess. Thsi is named Costs in Excess on XLS not sure why"
    when
        contract : Contract()
        contractRevenueToRecognizeITD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_ITD_LC", lcValue != null)
        contractRevenueInExcess : CurrencyMetric(metricType.code == "CONTRACT_REVENUE_IN_EXCESS_LC")
    then
        modify (contractRevenueInExcess) { lcValue = (contract.getTotalBillingsLocalCurrency() >= contractRevenueToRecognizeITD.lcValue ? 0B : contractRevenueToRecognizeITD.lcValue - contract.getTotalBillingsLocalCurrency())};
end

rule "Revenue to Recognize ITD"
    when
        pob : PerformanceObligation()
        percentComplete : Metric(metricType.code == "PERCENT_COMPLETE", value != null)
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        revenueToRecognizeITD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_ITD_LC")
    then
        modify (revenueToRecognizeITD) { lcValue = (percentComplete.value * transactionPrice.lcValue)};
end

rule "Revenue to Recognize Current Period"
    when
        pob : PerformanceObligation()
        revenueToRecognizeITD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_ITD_LC", lcValue != null)
        revenueToRecognizeITDPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "REVENUE_TO_RECOGNIZE_ITD_LC")
        revenueToRecognizeCurrentPeriod : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_PERIOD_LC")
    then
        modify (revenueToRecognizeCurrentPeriod) { lcValue = (revenueToRecognizeITDPriorPeriod.lcValue == null ? revenueToRecognizeITD.lcValue : revenueToRecognizeITD.lcValue - revenueToRecognizeITDPriorPeriod.lcValue)};
end


rule "Liquidated Damages Recognized ITD"
    when
        pob : PerformanceObligation()
        percentComplete : Metric(metricType.code == "PERCENT_COMPLETE", value != null)
        liquidatedDamagesITD : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_ITD_CC", lcValue != null)
        liquidatedDamagesITDToRecognize : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_ITD_LC")
    then
        modify (liquidatedDamagesITDToRecognize) { lcValue = (percentComplete.value * liquidatedDamagesITD.lcValue)};
end

rule "Liquidated Damages to Recognize in Current Period"
    when
        pob : PerformanceObligation()
        liquidatedDamagesToRecognizeITD : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_ITD_LC", lcValue != null)
        liquidatedDamagesRecognizedITDPriorPeriod : CurrencyMetricPriorPeriod(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_ITD_LC")
        liquidatedDamagesToRecognizeCurrentPeriod : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_PERIOD_LC")
    then
        modify (liquidatedDamagesToRecognizeCurrentPeriod) { lcValue = (liquidatedDamagesRecognizedITDPriorPeriod.lcValue == null ? liquidatedDamagesToRecognizeITD.lcValue : liquidatedDamagesToRecognizeITD.lcValue - liquidatedDamagesRecognizedITDPriorPeriod.lcValue)};
end

rule "Liquidated Damages in Backlog"
    when
        pob : PerformanceObligation()
        liquidatedDamagesITD : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_ITD_CC", lcValue != null)
        liquidatedDamagesITDToRecognize : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_ITD_LC", lcValue != null)
        liquidatedDamagesBacklog : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_BACKLOG_LC")
    then
        modify (liquidatedDamagesBacklog) { lcValue = (liquidatedDamagesITD.lcValue - liquidatedDamagesITDToRecognize.lcValue)};
end


rule "Net Period Sales"
    when
        pob : PerformanceObligation()
        revenueToRecognizecCurrentPeriod : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_PERIOD_LC", lcValue != null)
        liquidatedDamagesToRecognizeCurrentPeriod : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_TO_RECOGNIZE_PERIOD_LC", lcValue != null)
        netPeriodSales : CurrencyMetric(metricType.code == "NET_PERIOD_SALES_LC")
    then
        modify (netPeriodSales) { lcValue = (revenueToRecognizecCurrentPeriod.lcValue - liquidatedDamagesToRecognizeCurrentPeriod.lcValue)};
end

rule "Transaction Price in Backlog"
    when
        pob : PerformanceObligation()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        revenueToRecognizeITD : CurrencyMetric(metricType.code == "REVENUE_TO_RECOGNIZE_ITD_LC", lcValue != null)
        transactionPriceBacklog : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_BACKLOG_LC")
    then
        modify (transactionPriceBacklog) { lcValue = (transactionPrice.lcValue - revenueToRecognizeITD.lcValue)};
end


rule "Transaction Price Net LD"
    when
        pob : PerformanceObligation()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        liquidatedDamagesITD : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_ITD_CC", lcValue != null)
        transactionPriceNetLD : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_NET_LD_LC")
    then
        modify (transactionPriceNetLD) { lcValue = (transactionPrice.lcValue - liquidatedDamagesITD.lcValue)};
end

rule "Projected Gain/Loss"
    when
        pob : PerformanceObligation()
        transactionPriceNetLD : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_NET_LD_LC", lcValue != null)
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        projectedGainLoss : CurrencyMetric(metricType.code == "PROJECT_GAIN_LOSS_LC")
    then
        modify (projectedGainLoss) { lcValue = (transactionPriceNetLD.lcValue - estimatedCostAtCompletion.lcValue)};
end

rule "Contract Level Estimated Gross Profit and Margin"
    when
        contract : Contract()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        estimatedGrossProfit : CurrencyMetric(metricType.code == "ESTIMATED_GROSS_PROFIT_LC")
        estimatedGrossMargin : Metric(metricType.code == "ESTIMATED_GROSS_MARGIN")
    then
        logger.info("Calculating Contract Level Estimated Gross Profit and Margin");
        modify (estimatedGrossProfit) { lcValue = (transactionPrice.lcValue - estimatedCostAtCompletion.lcValue)};
        modify (estimatedGrossMargin) { value = (estimatedGrossProfit.lcValue == 0B ? 0B : estimatedGrossProfit.lcValue / transactionPrice.lcValue)};
end

rule "POB Group Level Estimated Gross Profit and Margin"
    when
        pobGroup : PerformanceObligationGroup()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        estimatedGrossProfit : CurrencyMetric(metricType.code == "ESTIMATED_GROSS_PROFIT_LC")
        estimatedGrossMargin : Metric(metricType.code == "ESTIMATED_GROSS_MARGIN")
    then
        logger.info("Calculating POB Group Level Estimated Gross Profit and Margin");
        modify (estimatedGrossProfit) { lcValue = (transactionPrice.lcValue - estimatedCostAtCompletion.lcValue)};
        modify (estimatedGrossMargin) { value = (estimatedGrossProfit.lcValue == 0B ? 0B : estimatedGrossProfit.lcValue / transactionPrice.lcValue)};
end

rule "POB Group Level Test"
    when
        pobGroup : PerformanceObligationGroup()
        transactionPrice : CurrencyMetric(metricType.code == "TRANSACTION_PRICE_CC", lcValue != null)
        estimatedCostAtCompletion : CurrencyMetric(metricType.code == "ESTIMATED_COST_AT_COMPLETION_LC", lcValue != null)
        estimatedGrossProfit : CurrencyMetric(metricType.code == "ESTIMATED_GROSS_PROFIT_LC")
        estimatedGrossMargin : Metric(metricType.code == "ESTIMATED_GROSS_MARGIN")
    then
        logger.info("Calculating POB Group Level Test");
end

rule "Contract Gross Profit and Margin ITD"
    when
        contract : Contract()
        contractRevenueITD : CurrencyMetric(metricType.code == "CONTRACT_REVENUE_TO_RECOGNIZE_ITD_LC", lcValue != null)
        contractLiquidatedDamagesITD : CurrencyMetric(metricType.code == "LIQUIDATED_DAMAGES_ITD_CC", lcValue != null)
        contractCOGSITD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_ITD_LC", lcValue != null)
        contractLossReserve : CurrencyMetric(metricType.code == "LOSS_RESERVE_ITD_LC", lcValue != null)
        contractGrossProfit : CurrencyMetric(metricType.code == "CONTRACT_GROSS_PROFIT_LC")
        contractGrossMargin : Metric(metricType.code == "CONTRACT_GROSS_MARGIN")
    then
        modify (contractGrossProfit) { lcValue = (contractRevenueITD.lcValue - contractCOGSITD.lcValue + contractLossReserve.lcValue)};
        modify (contractGrossMargin) { value = (contractGrossProfit.lcValue == 0B || (contractRevenueITD.lcValue - contractLiquidatedDamagesITD.lcValue) == 0B ? 0B : contractGrossProfit.lcValue / (contractRevenueITD.lcValue - contractLiquidatedDamagesITD.lcValue) )};
end

rule "Loss Reserve"
    when
        contract : Contract()
        gainLoss : CurrencyMetric(metricType.code == "PROJECT_GAIN_LOSS_LC", value != null)
        lossReserve : CurrencyMetric(metricType.code == "LOSS_RESERVE_ITD_LC")
    then
        modify (lossReserve) { value = (gainLoss.value >= 0B ? 0B : gainLoss.value) };
end

rule "Loss Reserve Adjustment"
    when
        contract : Contract()
        lossReserve : CurrencyMetric(metricType.code == "LOSS_RESERVE_ITD_LC", lcValue != null)
        priorPeriodLossReserve : CurrencyMetricPriorPeriod(metricType.code == "LOSS_RESERVE_ITD_LC")
        lossReserveAdjustment : CurrencyMetric(metricType.code == "LOSS_RESERVE_PERIOD_ADJ_LC")
    then
        modify (lossReserveAdjustment) { lcValue = (priorPeriodLossReserve.lcValue == null ? lossReserve.lcValue : lossReserve.lcValue - priorPeriodLossReserve.lcValue) };
end

rule "Cost of Goods Sold Adjusted"
    when
        contract : Contract()
        lossReserveAdjustment : CurrencyMetric(metricType.code == "LOSS_RESERVE_PERIOD_ADJ_LC", lcValue != null)
        costOfGoodsSoldITD : CurrencyMetric(metricType.code == "COST_OF_GOODS_SOLD_ITD_LC", lcValue != null)
        costOfGoodsSoldAdjusted : CurrencyMetric(metricType.code == "TOTAL_COST_GOODS_SOLD_LC")
    then
        modify (costOfGoodsSoldAdjusted) { lcValue = (costOfGoodsSoldITD.lcValue - lossReserveAdjustment.lcValue)};
end
