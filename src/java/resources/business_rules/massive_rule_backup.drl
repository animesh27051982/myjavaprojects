dialect "mvel"

import com.flowserve.system606.service.PerformanceObligationService;
import com.flowserve.system606.model.PerformanceObligation;
import com.flowserve.system606.model.InputTypeName;
import com.flowserve.system606.model.OutputTypeName;
import java.util.logging.Logger;

global Logger logger;
global PerformanceObligationService pobService;

rule "Calculate EAC Change"

    // Needed only to support tab-out ajax requests on the UI.
    when
        // Pull input values needed for this calculation.
        pob : PerformanceObligation(
            estimatedCostAtCompletion : getCurrencyInputValue(InputTypeName.ESTIMATED_COST_AT_COMPLETION) != null,
            estimatedCostAtCompletionPriorPeriod : getCurrencyInputValuePriorPeriod(InputTypeName.ESTIMATED_COST_AT_COMPLETION) != null
        )
    then
        changeInEstimate = estimatedCostAtCompletionPriorPeriod - estimatedCostAtCompletion;
        pob.putCurrencyOutputValue(OutputTypeName.CHANGE_IN_ESTIMATED_COST_AT_COMPLETION, changeInEstimate);
        pobService.testFromDrools(pob);
end

rule "Calculate Estimated Gross Profit and Margin"

    // Needed only to support tab-out ajax requests on the UI.
    when
        // Pull input values needed for this calculation.
        pob : PerformanceObligation(
            transactionPrice : getCurrencyInputValue(InputTypeName.TRANSACTION_PRICE) != null,
            estimatedCostAtCompletion : getCurrencyInputValue(InputTypeName.ESTIMATED_COST_AT_COMPLETION) != null
        )
    then
        // Calculate all outputs possible using these inputs.

        estimatedGrossProfit =  transactionPrice - estimatedCostAtCompletion;
        pob.putCurrencyOutputValue(OutputTypeName.ESTIMATED_GROSS_PROFIT, estimatedGrossProfit);
        estimatedGrossMargin = estimatedGrossProfit / transactionPrice
        pob.putCurrencyOutputValue(OutputTypeName.ESTIMATED_GROSS_MARGIN, estimatedGrossMargin);
end



rule "Calculate Cumulative Total ITD Costs, Percent Complete, Revenue Earned to Date, Cumulative Revenue to Recognize"
    // We have everything we need, run all calcs.
    when
        pob : PerformanceObligation(
            costIncurred : getCurrencyInputValue(InputTypeName.CUMULATIVE_COST_INCURRED) != null,
            thirdPartyProgress : getCurrencyInputValue(InputTypeName.CUMULATIVE_THIRD_PARTY_PROGRESS) != null,
            intercoProgress : getCurrencyInputValue(InputTypeName.CUMULATIVE_INTERCOMPANY_PROGRESS) != null,
            estimatedCostAtCompletion : getCurrencyInputValue(InputTypeName.ESTIMATED_COST_AT_COMPLETION) != null,
            transactionPrice : getCurrencyInputValue(InputTypeName.TRANSACTION_PRICE) != null,
            priorPeriodCumulativeRevenue : getCurrencyOutputValuePriorPeriod(OutputTypeName.CUMULATIVE_REVENUE_TO_RECOGNIZE) != null,
            periodExRate: getContractToLocalFxRate() != null,
            totalLiquidatedDamages : getCurrencyInputValue(InputTypeName.LIQUIDATED_DAMAGES) != null,
            liquidatedDamagesPriorPeriod : getLiquidatedDamagesPriorPeriod() != null,
            transactionPriceBacklogCC : getTransactionPriceBacklogCC() != null
        )
    then
        totalITDCosts = costIncurred + thirdPartyProgress + intercoProgress;
        pob.putCurrencyOutputValue(OutputTypeName.CUMULATIVE_TOTAL_ITD_COSTS, totalITDCosts);
        percentComplete = totalITDCosts / estimatedCostAtCompletion;
        pob.putCurrencyOutputValue(OutputTypeName.PERCENT_COMPLETE, percentComplete);
        revenueEarnedToDate = percentComplete * transactionPrice;
        pob.putCurrencyOutputValue(OutputTypeName.REVENUE_EARNED_TO_DATE, revenueEarnedToDate);
        revenueToRecognize = percentComplete * transactionPrice;
        pob.putCurrencyOutputValue(OutputTypeName.CUMULATIVE_REVENUE_TO_RECOGNIZE, revenueToRecognize );
        periodRevenue = revenueToRecognize - priorPeriodCumulativeRevenue;
        pob.putCurrencyOutputValue(OutputTypeName.PERIOD_REVENUE, periodRevenue);
        periodRevenueLocalCurrency = periodRevenue * periodExRate;
        pob.putCurrencyOutputValue(OutputTypeName.PERIOD_REVENUE_LOCAL_CURRENCY, periodRevenueLocalCurrency);
        cumulativeLiquidatedDamages = percentComplete * totalLiquidatedDamages;
        pob.putCurrencyOutputValue(OutputTypeName.CUMULATIVE_LIQUIDATED_DAMAGES_CC, cumulativeLiquidatedDamages);
        liquidatedDamagesCurrentPeriodCC = cumulativeLiquidatedDamages - liquidatedDamagesPriorPeriod;
        pob.putCurrencyOutputValue(OutputTypeName.LIQUIDATED_DAMAGES_RECOGNIZE_CURRENT_PERIOD_CC, liquidatedDamagesCurrentPeriodCC);
        liquidatedDamagesCurrentPeriodLC = liquidatedDamagesCurrentPeriodCC * periodExRate;
        pob.putCurrencyOutputValue(OutputTypeName.LIQUIDATED_DAMAGES_RECOGNIZE_CURRENT_PERIOD_LC, liquidatedDamagesCurrentPeriodCC);
        cumulativeRevenueLC = revenueToRecognize * periodExRate;
        pob.putCurrencyOutputValue(OutputTypeName.CUMULATIVE_REVENUE_LOCAL_CURRENCY, cumulativeRevenueLC);
        netPeriodSalesLC = periodRevenueLocalCurrency - liquidatedDamagesCurrentPeriodLC;
        pob.putCurrencyOutputValue(OutputTypeName.NET_PERIOD_SALES_LC, netPeriodSalesLC);
        backlogRevalued = transactionPriceBacklogCC * periodExRate;
        pob.putCurrencyOutputValue(OutputTypeName.BACKLOG_REVALUED, backlogRevalued);
        transactionPriceRevalued = backlogRevalued + cumulativeRevenueLC;
        pob.putCurrencyOutputValue(OutputTypeName.TRANSACTION_PRICE_REVALUED, transactionPriceRevalued);
        liquidatedDamagesBacklog = totalLiquidatedDamages - cumulativeLiquidatedDamages;
        pob.putCurrencyOutputValue(OutputTypeName.LIQUIDATED_DAMAGES_BACKLOG, liquidatedDamagesBacklog);
        liquidatedDamagesBacklogRevaluedLC = liquidatedDamagesBacklog * periodExRate;
        pob.putCurrencyOutputValue(OutputTypeName.LIQUIDATED_DAMAGES_BACKLOG_REVALUED_LC, liquidatedDamagesBacklogRevaluedLC);
        liquidatedDamagesRecognizedLC = 50.0B;
        pob.putCurrencyOutputValue(OutputTypeName.LIQUIDATED_DAMAGES_RECOGNIZED_LC, liquidatedDamagesRecognizedLC);
        totalEstimatedLiquidatedDamagesLC = liquidatedDamagesBacklogRevaluedLC - liquidatedDamagesRecognizedLC;
        pob.putCurrencyOutputValue(OutputTypeName.TOTAL_ESTIMATED_LIQUIDATED_DAMAGES_LC, totalEstimatedLiquidatedDamagesLC);
        totalTransactionPriceLiquidatedDamages = 50.0B;
        pob.putCurrencyOutputValue(OutputTypeName.TOTAL_TRANSACTION_PRICE_NET_LIQUIDATED_DAMAGES_LC, totalTransactionPriceLiquidatedDamages);
        costGoodsSoldBacklogRevalued = 50.0B;
        pob.putCurrencyOutputValue(OutputTypeName.COST_GOODS_SOLD_BACKLOG_REVALUED_LC, costGoodsSoldBacklogRevalued);
        remainingEstimateComplete = 50.0B;
        pob.putCurrencyOutputValue(OutputTypeName.REMAINING_ESTIMATE_COMPLETE_LC, remainingEstimateComplete);
        projectGainLoss = costGoodsSoldBacklogRevalued - remainingEstimateComplete;;
        pob.putCurrencyOutputValue(OutputTypeName.PROJECT_GAIN_LOSS_LC, projectGainLoss);
        itdStandardCost = 50.0B;
        pob.putCurrencyOutputValue(OutputTypeName.ITD_STANDARD_COSTS_COGS, itdStandardCost);
        lossContractAdjust = 50.0B;
        pob.putCurrencyOutputValue(OutputTypeName.LOSS_CONTRACT_ADJUSTED, lossContractAdjust);
        totalCostGoodsSold = 50.0B;
        pob.putCurrencyOutputValue(OutputTypeName.TOTAL_COST_GOODS_SOLD, totalCostGoodsSold);
        logger.info("Contract to Local Fx Rate: " + pob.contractToLocalFxRate);
end
